import { disableBodyScroll, enableBodyScroll} from 'body-scroll-lock/lib/bodyScrollLock.es6';
import scrollToElement from "scroll-to-element";
import moment from "moment";

import {errorClass, showClass, showSuccessMassage, toggleShowClass} from "./utils";
import urlUtils from "./utils";
import renderComments from "./comments";
import productSlider from "./product-slider";
import renderImages from "./render-images";
import raterJs from "rater-js";
import addToCart from './addToCart';

let card;

let getPost = async (id) => {
  const options = {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    }
  };
  try {
    const response = await fetch('./data/products.json', options);
    const json = await response.json();

    const element = json.find(el => el.id === id);

    return element
  } catch (err) {
    console.log('Error getting documents', err)
  }
};

let cardPage = {
  render : async () => {
    let request = urlUtils.parseRequestURL();
    card = await getPost(request.id);


    return `
      <div class="product-card-wrapper">
       <ul class="page__breadcrumbs breadcrumbs product-card__breadcrumbs">
          <li class="breadcrumbs__item"><a class="breadcrumbs__link"  href="/#/">–ì–ª–∞–≤–Ω–∞—è</a></li>
          <li class="breadcrumbs__item"><a class="breadcrumbs__link" href="/#/catalog">–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</a></li>
          <li class="breadcrumbs__item">${card.name}</li>
       </ul>

       <div class="product-wrapper js__item" data-id="${card.id}">
          <div class="product__gallery-container">
              <div class="product__gallery gallery-top swiper-container">
                 <ul class="product__slider swiper-wrapper">
                 </ul>
              </div>
              <div class="product__gallery-small swiper-container gallery-thumbs">
                 <ul class="product__slider-small swiper-wrapper">
                  </ul>
              </div>
          </div>
          <div class="product__info">
            <div class="product__heading">
              <h1 class="product__title js__title">${card.name}</h1>
              <p class="product__art">–ê—Ä—Ç–∏–∫—É–ª: <span id="product-article">${card.art}</span></p>
              <div class="product__rating" id="rater">
              </div>
            </div>

            <div class="product__about">
              <div class="product__price-wrapper inner-order-content">
                 <p class="product__price price-title">–¶–µ–Ω–∞: <span id="productPrice" class="js__price">${card.price}</span><span class="product__currency"> $</span> </p>
              </div>
              <button class="product__btn-buy main-buy-btn btn addToCartBtn js__link" data-id="${card.id}">üõí–ö—É–ø–∏—Ç—å</button>
            </div>
            <div class="product__brns">
               <button class="product__brn product__brn--description btn">–û–ø–∏—Å–∞–Ω–∏–µ</button>
               <button class="product__brn product__brn--review btn">–û—Ç–∑—ã–≤—ã</button>
            </div>
            <div class="product__review-wrapper">
              <a class="product__review" id="feedback">–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</a>
            </div>
          </div>
          <div class="product__description">
             <h2 class="product__description-title">–†–∞—Å—à–∏—Ä—è—é—â–∏–π—Å—è –≥–∏–¥—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä</h2>
             <p class="product__description-text">
                –ü—Ä–∏–∑–º–∞ —ç–∫—Å–ø–µ—Ä–º–µ–Ω—Ç–∞–ª—å–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–∞. –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–Ω—Ü–∏–ø–æ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏, –ø–ª–∞–∑–º–µ–Ω–Ω–æ–µ
                 –±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ.
                 –í–µ—â–µ—Å—Ç–≤–æ, –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —è–≤–ª–µ–Ω–∏—è, –∑–µ—Ä–∫–∞–ª—å–Ω–æ. –ú–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç, –∞
                 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç, —á—Ç–æ –≥–æ–º–æ–≥–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ –∑–µ—Ä–∫–∞–ª—å–Ω–æ –≤—Ä–∞—â–∞–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤—ã–π —Ñ–æ—Ç–æ–Ω.
             </p>
             <p class="product__description-text">
                –ì–∞–ª–∞–∫—Ç–∏–∫–∞ —Å–∂–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ–Ω.
                –ö–∞–∫ –ª–µ–≥–∫–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–∞–º—ã—Ö –æ–±—â–∏—Ö —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∏–∑–æ—Ç–µ—Ä–º–∏—á–Ω–æ –∏—Å–∫–∞–∂–∞–µ—Ç –≤–∑—Ä—ã
                –í–æ–∑–º—É—â–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏, –∫–∞–∫ —Ç–æ–≥–æ —Ç—Ä–µ–±—É—é—Ç –∑–∞–∫–æ–Ω—ã —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∏, —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ–Ω. –ú–∏—à–µ–Ω—å, –≤ —Ä–∞–º–∫–∞—Ö
                –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –ø—Ä–∏
                –ª—é–±–æ–º –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ä–µ–¥—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
             </p>
          </div>
          <div class="products__reviews reviews">
             <ul class="reviews__list">

            </ul>
          </div>
      </div>
    </div>
        `
  }
  , after_render: async () => {
    let cardsInJSON;

    const response = await fetch('./data/products.json');
    let json = await response.json();

    if(localStorage.getItem('cards')) {
      cardsInJSON = localStorage.getItem('cards');
      json = JSON.parse(cardsInJSON);
    } else {
      cardsInJSON = JSON.stringify(json);
      localStorage.setItem('cards', cardsInJSON);
    }

    json = JSON.parse(cardsInJSON);
    const cardElement = json.find(el => el.id === card.id);

    const productRatingCount = parseInt(cardElement.rating);

    const productRating = raterJs({
        element: document.querySelector("#rater"),
        showToolTip: true,
        max: 5,
        starSize: 25,
        disableText: 'Thank you for your vote!',
        ratingText: '{rating}/{maxRating}',
        isBusyText: null,
        step: 0.1,
        reverse: false,
        readOnly: true,
        rating: productRatingCount,

      rateCallback:function rateCallback(rating, done) {
        productRating.setRating(rating);
        productRating.disable();
        done();
      }
    });

    const product = document.querySelector(`.product-card-wrapper`);
    const productDescriptionBtn = product.querySelector(`.product__brn--description`);
    const productDescription = product.querySelector(`.product__description`);
    const commentsList = document.querySelector(`.reviews__list`);
    const mainImages = document.querySelector(`.product__slider`);
    const smallImages = document.querySelector(`.product__slider-small`);
    const reviewBtn = document.querySelector(`.product__brn--review`);

    renderImages(cardElement.imgLarge, mainImages, 600);
    renderImages(cardElement.imgSmall, smallImages, 100);

    productDescriptionBtn.addEventListener(`click`, ()=> {
      toggleShowClass(productDescription);
    });
    productSlider();
    renderComments(cardElement.comments, commentsList);


    const reviewFormPopup = document.querySelector(`.review-modal`);
    if(reviewFormPopup) {
      const reviewForm = reviewFormPopup.querySelector(`.review-modal__form`);
      const reviewPopupOpenBtn = document.querySelector(`.product__review`);
      const reviewFormSubmitBtn = reviewForm.querySelector(`.review-modal__btn`);

      const reviewFormName = reviewForm.elements.reviewName;
      const reviewFormText = reviewForm.elements.reviewMessage;
      const reviewFormCloseBtn = reviewFormPopup.querySelector(`.modal__close`);



      const showReviewFormPopup = () => {
        reviewFormPopup.classList.add(showClass);
        disableBodyScroll(reviewFormPopup);
        reviewForm.reset();
        reviewFormName.focus();

        reviewFormCloseBtn.addEventListener(`click`, (evt) => {
          evt.preventDefault();
          enableBodyScroll(reviewFormPopup);
          reviewFormPopup.classList.remove(showClass);
          reviewFormPopup.classList.remove(errorClass);
        });

      };

      const addNewComment = () => {
        const newComment = {};
        newComment.author = reviewFormName.value;
        newComment.time = moment().unix();
        newComment.text = reviewFormText.value;

        cardElement.comments.push(newComment);
      };

      reviewFormSubmitBtn.addEventListener(`click`, () => {
        if (formValidate(reviewForm)) {
          enableBodyScroll(reviewFormPopup);
          reviewFormPopup.classList.remove(showClass);

          addNewComment();

          json.forEach((element, index) => {
            if(element.id === cardElement.id) {
              json[index] = cardElement;
            }
          });

          const cardsInJSON = JSON.stringify(json);


          localStorage.setItem('cards', cardsInJSON);

          renderComments(cardElement.comments, commentsList);
          showSuccessMassage('–°–ø–∞—Å–∏–±–æ!', '–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');

          reviewFormPopup.classList.remove(errorClass);
        } else {
          if(reviewFormPopup.classList.contains(errorClass)) {
            reviewFormPopup.classList.remove(errorClass);
            void reviewFormPopup.offsetWidth;
            reviewFormPopup.classList.add(errorClass);
          }
        }
      });

      const formValidate = (form) => {
        let valid = true;
        const formName = form.elements.reviewName;
        const formMessage = form.elements.reviewMessage;

        reviewFormPopup.classList.remove(errorClass);

        const nameValidate = /^[a-zA-Z-–Ø–∞-—è0-9_]{3,}[a-zA-Z-–Ø–∞-—è]+[0-9]*$/;

        if (!formName.value.match(nameValidate)) {
          reviewFormPopup.classList.add(errorClass);
          valid = false;
        }

        if(!formMessage.value) {
          reviewFormPopup.classList.add(errorClass);
          valid = false;
        }

        return valid
      };

      reviewPopupOpenBtn.addEventListener(`click`, (evt) => {
        evt.preventDefault();
        showReviewFormPopup();
      });

    }

    reviewBtn.addEventListener(`click`, () => {
      scrollToElement(commentsList, {
        offset: 0,
        ease: 'out-expo',
        duration: 1500
      });
    });


    addToCart();
  }
};

export default cardPage;
